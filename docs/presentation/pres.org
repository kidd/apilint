#+TITLE: 
#+DATE: present...
#+AUTHOR: 
#+EMAIL: @rai & toni
#+OPTIONS: reveal_center:nil timestamp:nil
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:nil
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 25.0.50.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+REVEAL_THEME: black

* TENERIFE HAACKING TEAM
  file:capitan-canario.png
* Innovation
  [[file:adoption.png][file:adoption.png]]

* But this comes at a cost...
  - Explosion of adoption
  - Adopters from different areas
  - Adopters of different knowledge
  - Not Invented Here syndrome

* Ruby

    [[file:ruby-code.png][file:ruby-code.png]]

* With Apis

* Convergence
  - Standarization of styles.
  - Follow best practices
  - Recognized authorities

* We're there (kinda)
  - Ruby has its own style guide (powered by thoughtbot)
  - SCSS has it too
  - js has it too (airbnb)
  - Scientific publications have it too
  - APIs have it too (provided by heroku, but still settling)
# TODO github stars

* And we got smarter...
  So we made it automatic, so apps can check code looking for code red
  flags.
  - Rubocop: Automatic Ruby style checking tool.
    file:rubocop-info.png
* EH!!
  file:rubocop.png
  file:rubocop-stars.png

* BUT! no checker for APIs...
  Until now....

* Apilint (Zapp Brannigan)
  Given a collection of request-response pairs, automatically
  detects red flags or warns about bad practices on that API.
  - Ways to collect that data:
    - Apitools
    - Apicast
    - Swagger spec
    - Ruby Rack Middleware
    - rspec_api_documentation
* Apilint (Zapp Brannigan)
  Lints are the individual checkers for each style element.
  - It's easy to create your own lints
    file:lint-example.png
* Apilint (Zapp Brannigan)
  - Which are configurable, and also activable/deactivable
    file:config-example.png

* Pray for the Demo Gods
  - Command line interface:
    - Usage:
      [[file:ruby-code.png][file:apilint-cmd.png]]
    - Help:
      file:apilint-help-cmd.png
* Pray for the Demo Gods
  - Command line interface:
    - Results by Lint type:
      file:apilint-results-1.png
* Pray for the Demo Gods
  - Command line interface:
    - Results by Lint type:
      file:apilint-results2.png
* Pray for the Demo Gods
  - Command line interface:
    - Results by Lint type:
      file:apilint-results3.png
* Pray for the Demo Gods
  - Command line interface:
    - Total number of results:
      file:apilint-results-total.png
* Integrations (future work)
  - 3SCALE API DOCS PROXY
  - 3SCALE REQUEST LOGS
  - APINATOR ?
* Integrations (future work)
  - imagine...
* Integrations (future work)
  - imagine...

* THANKS
  - http://kidd.github.io/apilint  [WEB]
  - http://github.com/kidd/apilint [GH]
  - Q & A

#+TITLE: 
#+DATE: as...
#+AUTHOR: [3SCALE HACKATON 2015]
#+EMAIL: @rai & @toni
#+OPTIONS: reveal_center:nil timestamp:nil
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:nil
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 25.0.50.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+REVEAL_THEME: black

* TENERIFE HAACKING TEAM
  file:capitan-canario.png
  presenting:
* Innovation
  [[file:adoption.png][file:adoption.png]]

* But this comes at a cost...
  - Explosion of adoption
  - Adopters from different areas
  - Adopters of different knowledge
  - Not Invented Here syndrome

* Ruby drama
  We illustrate our examples with Ruby because it's our main language
  - Indentation: Spaces vs Tabs; Two spaces vs Four spaces
  - Parens or no parens
  - or and || && operators 
    - HOLA: @michal, @wojciech, @alex :-)
  - limit chars per line (80chars)
  - Align parameters
  - negative conditions
  - etc

* API drama
  - Different formats: XML vs JSON
  - REST or NO REST
  - Versioning
    - No versioning
    - Version in uri path
    - Version in headers
  - Backwards compatibilty
  - Different ways to represent resources
  - URI paths
  - ADD HERE YOUR PERSONAL NIGHTMARE

* Convergence
  - Standarization of styles.
  - Follow best practices
  - Recognized authorities
  - Enforced laws
  - Official commitee

* We're there (kinda)
  - Ruby has its own style guide (powered by thoughtbot)
  - SCSS has it too
  - js has it too (airbnb)
  - Scientific publications have it too
  - APIs have it too (provided by heroku, but still settling)

* And we got smarter...
  So we made it automatic, so apps can check code looking for code red
  flags.
  - Rubocop: Automatic Ruby style checking tool.
    file:rubocop-info.png
* EH!!
  file:rubocop.png
  file:rubocop-stars.png
* BUT! no checker for APIs...
  Until now....
* Apilint (Zapp Brannigan)
  Given a collection of request-response pairs, automatically
  detects red flags or warns about bad practices on that API.

  𝄞 𝄞 𝄞 It's got to beeeeeee perfect 𝄞 𝄞 𝄞

* Apilint (Zapp Branningan)
  Ways to collect HTTP requests & responses:
    - Apitools
    - Apicast
    - Swagger spec
    - Ruby Rack Middleware
    - rspec_api_documentation
* Apilint (Zapp Brannigan)
  Lints are the individual checkers for each style element.
  - It's easy to create your own lints
    file:lint-example.png
* Apilint (Zapp Brannigan)
  - Which are configurable, and also activable/deactivable
    file:config-example.png

* Pray for the Demo Gods
  - Command line interface:
    - Usage:
      [[file:ruby-code.png][file:apilint-cmd.png]]
    - Help:
      file:apilint-help-cmd.png
* Pray for the Demo Gods
  - Command line interface:
    - Results by Lint type:
      file:apilint-results-1.png
* Pray for the Demo Gods
  - Command line interface:
    - Results by Lint type:
      file:apilint-results2.png
* Pray for the Demo Gods
  - Command line interface:
    - Results by Lint type:
      file:apilint-results3.png
* Pray for the Demo Gods
  - Command line interface:
    - Total number of results:
      file:apilint-results-total.png
* Integrations (future work)
  - 3SCALE API DOCS PROXY
  - 3SCALE REQUEST LOGS
  - APINATOR ?
* Integrations (future work)
  - imagine:
    - 3SCALE widget/badges with info about your API quality
      file:codeclimate-badge.png
* Integrations (future work)
  - imagine:
    - 3SCALE section (ala codeclimate) with general recommendations about API design and info
      about your real traffic API
      file:codeclimate-results.png

* THANKS
  :PROPERTIES: 
  :reveal_background: ./bg.jpg
  :reveal_background_trans: slide
    :END:
  - http://kidd.github.io/apilint  [WEB]
  - http://github.com/kidd/apilint [GH]
  - Q & A
